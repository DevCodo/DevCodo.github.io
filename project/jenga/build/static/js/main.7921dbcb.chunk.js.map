{"version":3,"sources":["components/Block.js","components/Tower.js","components/Table.js","App.js","index.js"],"names":["Block","args","position","rotation","useState","isChoseBlock","setIsChoseBlock","useBox","mass","ref","api","useLoader","THREE","texture","handlePointerUp","evt","castShadow","receiveShadow","onPointerDown","intersections","eventObject","uuid","current","onPointerUp","onPointerMove","set","point","x","z","onPointerLeave","attach","map","Tower","blocks","i","j","block_height","Math","PI","push","useThree","scene","intersect_plane","camera","children","find","child","geometry","type","useEffect","block","Table","usePlane","console","log","back","App","shadows","colorManagement","gl","alpha","fov","Suspense","fallback","Environment","files","path","background","OrbitControls","mouseButtons","RIGHT","ROTATE","intensity","shadow-mapSize-height","shadow-mapSize-width","defaultContactMaterial","friction","restitution","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7921dbcb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useLoader, useThree } from '@react-three/fiber'\r\nimport { Box } from '@react-three/drei'\r\nimport { useBox } from '@react-three/cannon'\r\nimport * as THREE from 'three'\r\n\r\nconst Block = ({ args, position, rotation }) => {\r\n  const [isChoseBlock, setIsChoseBlock] = useState(false)\r\n  const [ref, api] = useBox(() => ({ mass: 1, position, args, rotation }))\r\n  const [texture] = useLoader(THREE.TextureLoader, ['/images/plywood.jpg'])\r\n\r\n  // const { scene, camera } = useThree()\r\n  // const intersect_plane = scene.children.find(child => child.geometry?.type === 'PlaneGeometry')\r\n  // const _vector = new THREE.Vector3()\r\n  // const mouse_position = new THREE.Vector3()\r\n\r\n  // const handleMouseMove = evt => {\r\n  //   _vector.set(\r\n  //     (evt.clientX / window.innerWidth) * 2 - 1,\r\n  //     -(evt.clientY / window.innerHeight) * 2 + 1,\r\n  //     1\r\n  //   )\r\n  //   _vector.unproject(camera)\r\n  //   const ray = new THREE.Raycaster(camera.position, _vector.sub(camera.position).normalize())\r\n  //   const intersection = ray.intersectObject(intersect_plane)\r\n  //   mouse_position.copy(intersection[0].point)\r\n  // }\r\n\r\n  const handlePointerMove = evt => {\r\n    if (isChoseBlock) {\r\n      api.position.set(evt.point.x, position[1], evt.point.z)\r\n    }\r\n  }\r\n\r\n  const handlePointerDown = evt => {\r\n    if (evt.intersections[0].eventObject.uuid === ref.current.uuid) {\r\n      setIsChoseBlock(true)\r\n    }\r\n  }\r\n\r\n  const handlePointerUp = evt => {\r\n    setIsChoseBlock(false)\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      key={13}\r\n      ref={ref}\r\n      args={args}\r\n      position={position}\r\n      rotation={rotation}\r\n      castShadow\r\n      receiveShadow\r\n      onPointerDown={handlePointerDown}\r\n      onPointerUp={handlePointerUp}\r\n      onPointerMove={handlePointerMove}\r\n      onPointerLeave={handlePointerUp}\r\n      // onClick={() => api.velocity.set(-1, 2, 0)}\r\n    >\r\n      <meshStandardMaterial attach=\"material\" map={texture} />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Block\r\n","import React, { useEffect } from 'react'\r\nimport { useThree } from '@react-three/fiber'\r\nimport * as THREE from 'three'\r\nimport Block from './Block'\r\n\r\nconst Tower = () => {\r\n  const blocks = [],\r\n    block_length = 6,\r\n    block_height = 1,\r\n    block_width = 1.5,\r\n    offset = 2,\r\n    rows = 16\r\n\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      const position = [0, 0, 0]\r\n      const rotation = [0, 0, 0]\r\n      position[1] = block_height / 2 + block_height * i\r\n      if (i % 2 === 0) {\r\n        rotation[1] = Math.PI / 2\r\n        position[0] = offset * j - ((offset * 3) / 2 - offset / 2)\r\n      } else {\r\n        position[2] = offset * j - ((offset * 3) / 2 - offset / 2)\r\n      }\r\n      blocks.push(\r\n        <Block\r\n          key={`${i}${j}`}\r\n          args={[block_length, block_height, block_width]}\r\n          position={position}\r\n          rotation={rotation}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  const { scene, camera } = useThree()\r\n  const _vector = new THREE.Vector3()\r\n  const mouse_position = new THREE.Vector3()\r\n  const block_offset = new THREE.Vector3()\r\n  const intersect_plane = scene.children.find(child => child.geometry?.type === 'PlaneGeometry')\r\n  let selected_block = null\r\n  const handleMouseDown = evt => {\r\n    _vector.set(\r\n      (evt.clientX / window.innerWidth) * 2 - 1,\r\n      -(evt.clientY / window.innerHeight) * 2 + 1,\r\n      1\r\n    )\r\n\r\n    _vector.unproject(camera)\r\n\r\n    const ray = new THREE.Raycaster(camera.position, _vector.sub(camera.position).normalize())\r\n    const intersections = ray.intersectObjects(\r\n      scene.children.filter(child => child.geometry?.type === 'BoxGeometry')\r\n    )\r\n\r\n    if (intersections.length > 0) {\r\n      selected_block = intersections[0].object\r\n\r\n      _vector.set(0, 0, 0)\r\n      // selected_block.setAngularFactor(_vector)\r\n      // selected_block.setAngularVelocity(_vector)\r\n      // selected_block.setLinearFactor(_vector)\r\n      // selected_block.setLinearVelocity(_vector)\r\n\r\n      mouse_position.copy(intersections[0].point)\r\n      block_offset.subVectors(selected_block.position, mouse_position)\r\n\r\n      intersect_plane.position.y = mouse_position.y\r\n    }\r\n  }\r\n\r\n  const handleMouseMove = evt => {\r\n    // if (selected_block !== null) {\r\n    _vector.set(\r\n      (evt.clientX / window.innerWidth) * 2 - 1,\r\n      -(evt.clientY / window.innerHeight) * 2 + 1,\r\n      1\r\n    )\r\n    _vector.unproject(camera)\r\n    const ray = new THREE.Raycaster(camera.position, _vector.sub(camera.position).normalize())\r\n    const intersection = ray.intersectObject(intersect_plane)\r\n    mouse_position.copy(intersection[0].point)\r\n    // console.log(mouse_position)\r\n    // }\r\n  }\r\n\r\n  const handleMouseUp = evt => {\r\n    if (selected_block !== null) {\r\n      _vector.set(1, 1, 1)\r\n      // selected_block.setAngularFactor(_vector)\r\n      // selected_block.setLinearFactor(_vector)\r\n      selected_block = null\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (intersect_plane) {\r\n      // document.body.addEventListener('pointermove', handleMouseMove)\r\n      // document.body.addEventListener('pointerdown', handleMouseDown)\r\n      // document.body.addEventListener('pointerup', handleMouseUp)\r\n    }\r\n  }, [intersect_plane])\r\n\r\n  return <>{blocks.map(block => block)}</>\r\n}\r\n\r\nexport default Tower\r\n","import React from 'react'\r\nimport { useLoader } from '@react-three/fiber'\r\nimport { Plane } from '@react-three/drei'\r\nimport { usePlane } from '@react-three/cannon'\r\nimport * as THREE from 'three'\r\n// import { BasisTextureLoader } from 'three/examples/jsm/loaders/BasisTextureLoader'\r\n\r\nconst Table = () => {\r\n  const [ref] = usePlane(() => ({\r\n    rotation: [Math.PI * 1.5, 0, 0],\r\n  }))\r\n  const [texture] = useLoader(THREE.TextureLoader, ['/images/wood.jpg'])\r\n  console.log(texture)\r\n  return (\r\n    <Plane\r\n      receiveShadow\r\n      ref={ref}\r\n      position={[0, 0, 0]}\r\n      rotation={[-Math.PI / 2, 0, 0]}\r\n      args={[50, 50]}\r\n    >\r\n      <meshStandardMaterial attach=\"material\" map={texture} back />\r\n    </Plane>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { OrbitControls, Environment } from '@react-three/drei'\nimport { Physics } from '@react-three/cannon'\nimport Tower from './components/Tower'\nimport Table from './components/Table'\nimport * as THREE from 'three'\n\nconst App = () => {\n  return (\n    <Canvas\n      shadows={{\n        type: THREE.PCFSoftShadowMap,\n      }}\n      colorManagement\n      gl={{ alpha: false }}\n      camera={{ position: [5, 15, 30], fov: 75 }}\n    >\n      {/* <Environment\n        background={false}\n        files={['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png']}\n        path={'/'}\n      /> */}\n\n      <React.Suspense fallback={null}>\n        <Environment\n          files={['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png']}\n          path={'/images/environmentMaps/4/'}\n          background={true}\n        />\n      </React.Suspense>\n\n      {/* <color attach=\"background\" args={['darkblue']} /> */}\n      {/* <hemisphereLight intensity={0.35} /> */}\n      <OrbitControls\n        mouseButtons={{\n          RIGHT: THREE.MOUSE.ROTATE,\n        }}\n      />\n      <ambientLight intensity={0.2} />\n      <directionalLight\n        intensity={0.5}\n        position={[5, 5, 5]}\n        castShadow\n        shadow-mapSize-height={1024}\n        shadow-mapSize-width={1024}\n      />\n      <directionalLight\n        intensity={0.7}\n        position={[-10, 5, 7]}\n        castShadow\n        shadow-mapSize-height={1024}\n        shadow-mapSize-width={1024}\n      />\n      <Physics defaultContactMaterial={{ friction: 0.1, restitution: 0.4 }}>\n        <Tower />\n        <Table />\n      </Physics>\n    </Canvas>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}